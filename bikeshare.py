{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d669151c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! Let's explore some US bikeshare data!\n",
      "Enter a city name new York city/chicago/washington:\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "MONTH_DATA = (\"all\",\"january\", \"february\", \"march\", \"april\", \"may\",\"june\")\n",
    "DAY_DATA = (\"all\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\")\n",
    "\n",
    "\n",
    "def get_filters():\n",
    "   \n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    \n",
    "    print(\"Enter a city name new York city/chicago/washington:\")\n",
    "    city_name = input().lower()\n",
    "    while city_name not in CITY_DATA:\n",
    "        print(\"No Such City in our dataset! Please Enter a city between new York city/chicago or washington: \")\n",
    "        city_name = input().lower()\n",
    "        \n",
    "    # get user input for month (all, january, february, ... , june)\n",
    "    \n",
    "    print(\"Enter a month name january/february/march/april/may/june or type all: \")\n",
    "    month_name = input().lower()\n",
    "    while month_name not in MONTH_DATA:\n",
    "        print(\"No such Month in our dataset! Please Enter a month between January to June or type all\")\n",
    "        month_name = input().lower()\n",
    "\n",
    "    # get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    print(\"Enter a day name monday/tuesday/wednesday/thursday/friday/saturday/sunday or type all: \")\n",
    "    day_name = input().lower()\n",
    "    while day_name not in DAY_DATA:\n",
    "        print(\"No such Day in our dataset! Please Select anyday of the week or type all. \")\n",
    "        day_name = input().lower()\n",
    "\n",
    "\n",
    "    print('-'*40)\n",
    "    return city_name, month_name, day_name\n",
    "\n",
    "\n",
    "def load_data(city, month, day):\n",
    "    \n",
    "    # load data file into a dataframe\n",
    "    df = pd.read_csv(CITY_DATA[city])\n",
    "\n",
    "    # convert the Start Time column to datetime\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "\n",
    "    # extract month and day of week from Start Time to create new columns\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    df['day'] = df['Start Time'].dt.day_name()\n",
    "\n",
    "    # filter by month if applicable\n",
    "    if month != 'all':\n",
    "        # use the index of the months list to get the corresponding int\n",
    "        months = ['january', 'february', 'march', 'april', 'may', 'june']\n",
    "        month = months.index(month) + 1\n",
    "\n",
    "        # filter by month to create the new dataframe\n",
    "        df = df[df['month'] == month]\n",
    "\n",
    "    # filter by day of week if applicable\n",
    "    if day != 'all':\n",
    "        # filter by day of week to create the new dataframe\n",
    "        df = df[df['day'] == day.title()]\n",
    "    \n",
    "\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "    \n",
    "    #display the most common month\n",
    "\n",
    "    popular_month = df['month'].mode()[0]\n",
    "    print('Most Common Month:', popular_month)\n",
    "\n",
    "\n",
    "    #display the most common day of week\n",
    "\n",
    "    popular_day = df['day'].mode()[0]\n",
    "    print('Most Common day:', popular_day)\n",
    "\n",
    "\n",
    "\n",
    "    #display the most common start hour\n",
    "\n",
    "    df['hour'] = df['Start Time'].dt.hour\n",
    "    popular_hour = df['hour'].mode()[0]\n",
    "    print('Most Common Hour:', popular_hour)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display most commonly used start station\n",
    "    \n",
    "    start_station = df['Start Station'].mode()[0]\n",
    "    print(\"Most Commonly Used Start Station:\",start_station)\n",
    "\n",
    "\n",
    "    # display most commonly used end station\n",
    "    \n",
    "    end_station = df['End Station'].mode()[0]\n",
    "    print(\"Most Commonly Used End Station:\",end_station)\n",
    "\n",
    "\n",
    "\n",
    "    # display most frequent combination of start station and end station trip\n",
    "    \n",
    "    combination_Station = df.groupby(['Start Station', 'End Station']).count()\n",
    "    print('Most Commonly used combination of start station and end station trip:', start_station, \" & \", end_station)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display total travel time\n",
    "    \n",
    "    #total_travel = df['Trip Duration'].sum()\n",
    "    #print(\"Total travel time :\", total_travel)\n",
    "    \n",
    "    Total_Travel_Time = sum(df['Trip Duration'])\n",
    "    print('Total travel time:', Total_Travel_Time/86400, \" Days\")\n",
    "\n",
    "    # display mean travel time\n",
    "    #mean_travel = df['Trip Duration'].mean()\n",
    "    #print(\"Mean travel time :\", mean_travel)\n",
    "    \n",
    "    Mean_Travel_Time = df['Trip Duration'].mean()\n",
    "    print('Mean travel time:', Mean_Travel_Time/60, \" Minutes\")\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # Display counts of user types\n",
    "    \n",
    "    user_types = df['User Type'].value_counts()\n",
    "\n",
    "    print('User Types:\\n', user_types)\n",
    "\n",
    "    # Display counts of gender\n",
    "    try:\n",
    "        gender_types = df['Gender'].value_counts()\n",
    "        print('\\nGender Types:\\n', gender_types)\n",
    "    except KeyError:\n",
    "           print(\"\\nGender Types:\\nNo data available for this month.\")\n",
    "\n",
    "    # Display earliest, most recent, and most common year of birth\n",
    "    try:\n",
    "        Earliest_Year = df['Birth Year'].min()\n",
    "        print('\\nEarliest Year:', Earliest_Year)\n",
    "    except KeyError:\n",
    "              print(\"No data available for this month.\")\n",
    "\n",
    "    try:\n",
    "        Most_Recent_Year = df['Birth Year'].max()\n",
    "        print('\\nMost Recent Year:', Most_Recent_Year)\n",
    "    except KeyError:\n",
    "         print(\"No data available for this month.\")\n",
    " \n",
    "    try:\n",
    "        Most_Common_Year = df['Birth Year'].value_counts().idxmax()\n",
    "        print('\\nMost Common Year:', Most_Common_Year)\n",
    "    except KeyError:\n",
    "           print(\"No data available for this month.\")\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "         \n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\tmain()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c19d5d55",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
